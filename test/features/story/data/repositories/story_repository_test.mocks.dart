// Mocks generated by Mockito 5.4.4 from annotations
// in bozenas_tales/test/features/story/data/repositories/story_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:bozenas_tales/core/failure.dart' as _i5;
import 'package:bozenas_tales/features/stories/data/datasources/story_datasource.dart'
    as _i3;
import 'package:bozenas_tales/features/stories/data/models/story_model.dart'
    as _i6;
import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [StoryDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockStoryDataSource extends _i1.Mock implements _i3.StoryDataSource {
  MockStoryDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>> addStory(
          _i6.StoryModel? storyModel) =>
      (super.noSuchMethod(
        Invocation.method(
          #addStory,
          [storyModel],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #addStory,
            [storyModel],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.StoryModel>>> getStories() =>
      (super.noSuchMethod(
        Invocation.method(
          #getStories,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.StoryModel>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.StoryModel>>(
          this,
          Invocation.method(
            #getStories,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.StoryModel>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>> updateStory(
          _i6.StoryModel? storyModel) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateStory,
          [storyModel],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #updateStory,
            [storyModel],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>> deleteStory(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteStory,
          [id],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #deleteStory,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>);
}
